{"version":3,"sources":["images/logo.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","api","App","useState","query","setQuery","weather","setWeather","className","src","require","alt","height","width","main","temp","type","placeholder","onChange","e","target","value","onKeyPress","key","fetch","then","res","json","result","console","log","name","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","currentDate","Date","temp_max","temp_min","feels_like","wind","speed","pressure","toFixed","visibility","coord","lat","lon","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"8LAAAA,EAAOC,QAAU,IAA0B,kC,sFCIrCC,G,MACE,oCADFA,EAEG,2CAiFMC,MA9Ef,WAAgB,IAAD,EAEYC,mBAAS,IAFrB,mBAENC,EAFM,KAEAC,EAFA,OAGgBF,mBAAS,IAHzB,mBAGNG,EAHM,KAGEC,EAHF,KA6Bb,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,UACb,yBAAKC,IAAKC,EAAQ,IAAsBC,IAAI,UAAUC,OAAO,MAAMC,MAAM,QACvE,wBAAIL,UAAU,aACV,2CACA,uCAIR,yBAAKA,UAAmC,oBAAhBF,EAAQQ,MAAuBR,EAAQQ,KAAKC,KAAO,GAAI,kBAAsC,mBACnH,sDACA,2BAAOC,KAAK,OACLR,UAAU,aACVS,YAAY,sBACZC,SAAU,SAAAC,GAAC,OAAGd,EAASc,EAAEC,OAAOC,QAChCA,MAAOjB,EACPkB,WAzCE,SAAAH,GACA,UAAVA,EAAEI,KACHC,MAAM,GAAD,OAAIvB,EAAJ,qBAAyBG,EAAzB,+BAAqDH,IACzDwB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJrB,EAAWqB,GACXvB,EAAS,IACTwB,QAAQC,IAAIF,SAmCW,oBAAhBtB,EAAQQ,KACf,6BACA,yBAAKN,UAAU,mBACb,uBAAGA,UAAU,eAAeF,EAAQQ,KAAKC,KAAzC,SACA,4BACE,4BAAKT,EAAQyB,KAAb,KAAqBzB,EAAQ0B,IAAIC,SACjC,4BApCU,SAACC,GACnB,IAGIC,EAFO,CAAC,SAAS,SAAS,UAAU,YAAY,WAAW,SAAS,YAEzDD,EAAEE,UACbC,EAAOH,EAAEI,UACTC,EALS,CAAC,UAAU,WAAW,QAAQ,QAAQ,MAAM,OAAO,OAAO,SAAS,YAAY,UAAU,WAAW,YAK9FL,EAAEM,YACjBC,EAAOP,EAAEQ,cAEb,MAAM,GAAN,OAAUP,EAAV,YAAiBE,EAAjB,YAAyBE,EAAzB,YAAkCE,GA2BrBE,CAAY,IAAIC,SAGzB,yBAAKpC,UAAU,WACb,wBAAIA,UAAU,mBACZ,oDAA0BF,EAAQQ,KAAK+B,SAAvC,SACA,oDAA0BvC,EAAQQ,KAAKgC,SAAvC,SACA,2CAAiBxC,EAAQQ,KAAKiC,WAA9B,SACA,2CAAiBzC,EAAQ0C,KAAKC,MAA9B,QAEF,wBAAIzC,UAAU,mBACZ,0CAAwC,QAAvBF,EAAQQ,KAAKoC,SAAoB,KAAKC,QAAQ,GAA/D,MACA,4CAAuC,UAApB7C,EAAQ8C,YAAyBD,QAAQ,GAA5D,UACA,yCAAe7C,EAAQ+C,MAAMC,IAA7B,OAAqChD,EAAQ+C,MAAMC,IAAM,EAAG,IAAI,KAChE,0CAAgBhD,EAAQ+C,MAAME,IAA9B,OAAsCjD,EAAQ+C,MAAME,IAAM,EAAG,IAAI,QAIpE,MCpEWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3C,MAAK,SAAA4C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3C,QAAQ2C,MAAMA,EAAMC,c","file":"static/js/main.7179c330.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.b0e94896.png\";","import React, {useState} from 'react';\n/*import logo from './logo.svg';*/\nimport './App.css';\n\nconst api = {\n  key : \"9c63bcc881bda8f8fd73608995f9a967\",\n  base : \"https://api.openweathermap.org/data/2.5/\"\n}\n\nfunction App() {\n\n  const [query,setQuery] = useState('');\n  const [weather,setWeather] = useState('');\n\n  const search = e =>{\n    if(e.key === \"Enter\"){\n      fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\n      .then(res => res.json())\n      .then(result => {\n        setWeather(result);\n        setQuery('');\n        console.log(result);\n      })\n    }\n  }\n\n  const currentDate = (d) =>{\n    let months = [\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"];\n    let days = [\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"];\n\n    let day = days[d.getDay()];\n    let date = d.getDate();\n    let month = months[d.getMonth()];\n    let year = d.getFullYear();\n\n    return `${day} ${date} ${month} ${year}`\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"header\">\n        <img src={require('./images/logo.png')} alt=\"My Logo\" height=\"100\" width=\"140\"/>\n          <ul className=\"menuItems\">\n              <li>My Projects</li>\n              <li>About</li>\n          </ul>\n      </div>\n\n      <div className={(typeof weather.main != \"undefined\")?((weather.main.temp < 16)?'content cold-bg':'content warm-bg'): 'content warm-bg'}>\n        <h2>What is your Weather ?</h2>\n        <input type=\"text\"\n               className=\"search-bar\"\n               placeholder=\"search for city....\"\n               onChange={e =>setQuery(e.target.value)}\n               value={query}\n               onKeyPress = {search}/>\n      {(typeof weather.main != \"undefined\") ? (\n        <div>\n        <div className=\"details_sheet_1\">\n          <p className=\"temperature\">{weather.main.temp}°C</p>\n          <ul>\n            <li>{weather.name}, {weather.sys.country}</li>\n            <li>{currentDate(new Date())}</li>\n          </ul>\n        </div>\n        <div className=\"set_two\">\n          <ul className=\"details_sheet_2\">\n            <li>Maximum Temperature: {weather.main.temp_max}°C</li>\n            <li>Minimum Temperature: {weather.main.temp_min}°C</li>\n            <li>Feels like: {weather.main.feels_like}°C</li>\n            <li>Wind Speed: {weather.wind.speed}mph</li>\n          </ul>\n          <ul className=\"details_sheet_3\">\n            <li>Pressure: {((weather.main.pressure)*0.0002953*100).toFixed(2)}Hg</li>\n            <li>Visibility: {((weather.visibility)*0.000621371).toFixed(2)} miles</li>\n            <li>Latitute: {weather.coord.lat}°{((weather.coord.lat < 0)?'S':'N')}</li>\n            <li>Longitude: {weather.coord.lon}°{((weather.coord.lon < 0)?'W':'E')}</li>\n          </ul>\n        </div>\n        </div>\n      ):('')}\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}